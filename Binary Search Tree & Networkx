{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "yf7qq_5012_Mod5_BST_and_NetworkX.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dJIXJaAEu3fS"
      },
      "source": [
        "# Binary Search Tree. HW 5.4\n",
        "\n",
        "author: Yayi Feng (yf7qq)\n",
        "\n",
        "Below is code for a Binary Search Tree Class. Six of the methods in this implementation are incomplete (vacuous): find, size, preorder, inorder, postorder, and \\_\\_str\\_\\_. It is your task to complete them. Use the testing code to test and confirm your implementation. Submit the completed notebook file (BOTH the .ipynb and a rendered .html).\n",
        "\n",
        "Extra Credit: add a member method for height(self) that computes/returns the height of the tree. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qpP8DA3KuwrN"
      },
      "source": [
        "import networkx as nx\n",
        "import random\n",
        "\n",
        "    \n",
        "def hierarchy_pos(G, root=None, width=1., vert_gap = 0.2, vert_loc = 0, xcenter = 0.5):\n",
        "\n",
        "    '''\n",
        "    From Joel's answer at https://stackoverflow.com/a/29597209/2966723.  \n",
        "    Licensed under Creative Commons Attribution-Share Alike \n",
        "    \n",
        "    If the graph is a tree this will return the positions to plot this in a \n",
        "    hierarchical layout.\n",
        "    \n",
        "    G: the graph (must be a tree)\n",
        "    \n",
        "    root: the root node of current branch \n",
        "    - if the tree is directed and this is not given, \n",
        "      the root will be found and used\n",
        "    - if the tree is directed and this is given, then \n",
        "      the positions will be just for the descendants of this node.\n",
        "    - if the tree is undirected and not given, \n",
        "      then a random choice will be used.\n",
        "    \n",
        "    width: horizontal space allocated for this branch - avoids overlap with other branches\n",
        "    \n",
        "    vert_gap: gap between levels of hierarchy\n",
        "    \n",
        "    vert_loc: vertical location of root\n",
        "    \n",
        "    xcenter: horizontal location of root\n",
        "    '''\n",
        "    if not nx.is_tree(G):\n",
        "        raise TypeError('cannot use hierarchy_pos on a graph that is not a tree')\n",
        "\n",
        "    if root is None:\n",
        "        if isinstance(G, nx.DiGraph):\n",
        "            root = next(iter(nx.topological_sort(G)))  #allows back compatibility with nx version 1.11\n",
        "        else:\n",
        "            root = random.choice(list(G.nodes))\n",
        "\n",
        "    def _hierarchy_pos(G, root, width=1., vert_gap = 0.2, vert_loc = 0, xcenter = 0.5, pos = None, parent = None):\n",
        "        '''\n",
        "        see hierarchy_pos docstring for most arguments\n",
        "\n",
        "        pos: a dict saying where all nodes go if they have been assigned\n",
        "        parent: parent of this branch. - only affects it if non-directed\n",
        "\n",
        "        '''\n",
        "    \n",
        "        if pos is None:\n",
        "            pos = {root:(xcenter,vert_loc)}\n",
        "        else:\n",
        "            pos[root] = (xcenter, vert_loc)\n",
        "        children = list(G.neighbors(root))\n",
        "        if not isinstance(G, nx.DiGraph) and parent is not None:\n",
        "            children.remove(parent)  \n",
        "        if len(children)!=0:\n",
        "            dx = width/len(children) \n",
        "            nextx = xcenter - width/2 - dx/2\n",
        "            for child in children:\n",
        "                nextx += dx\n",
        "                pos = _hierarchy_pos(G,child, width = dx, vert_gap = vert_gap, \n",
        "                                    vert_loc = vert_loc-vert_gap, xcenter=nextx,\n",
        "                                    pos=pos, parent = root)\n",
        "        return pos\n",
        "\n",
        "            \n",
        "    return _hierarchy_pos(G, root, width, vert_gap, vert_loc, xcenter)"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WjWSpaVdu3X6"
      },
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"\n",
        "Binary Search Tree\n",
        "Plus tree traversal methods \n",
        "\n",
        "NOTE: I placed return statements immediately after the function declarations so \n",
        "you can run the code and see the print statments before beginning the assignment. \n",
        "HOWEVER ... You will need to move the return statements to the end of the functions\n",
        "once you complete each function implementation :)\n",
        "\"\"\"\n",
        "import matplotlib.pyplot as plt\n",
        "import networkx as nx\n",
        "\n",
        "class Node:\n",
        "\n",
        "      def __init__(self, data): # Constructor of Node class\n",
        "            # A node has a data value, a left child node and a right child node\n",
        "          self.data = data  #data item\n",
        "          self.left = None  #left child, initially empty\n",
        "          self.right = None #right child, initially empty\n",
        "\n",
        "\n",
        "      def __str__(self): # Printing a node\n",
        "\n",
        "          return str(self.data) #return as string\n",
        "\n",
        "# ===================================================================\n",
        "# ===================================================================\n",
        "\n",
        "class BinarySearchTree:\n",
        "\n",
        "      def __init__(self): # Constructor of BinarySearchTree class\n",
        "\n",
        "          self.root = None  # Initially, an empty root node\n",
        "          self.tree_size = 0\n",
        "          self.nodeList = []\n",
        "          self.edgeList = []\n",
        "          self.leftHeight = 0\n",
        "          self.rightHeight = 0\n",
        "\n",
        "\n",
        "# ===================================================================\n",
        "      \n",
        "      def buildBST(self, val):  # Build (\"create\") a binary search tree \n",
        "          \n",
        "          if self.root == None:\n",
        "\n",
        "             self.root = Node(val)\n",
        "             self.nodeList.append(self.root.data)\n",
        "             self.tree_size += 1\n",
        "\n",
        "          else:\n",
        "\n",
        "             current = self.root\n",
        "\n",
        "             while 1:\n",
        "\n",
        "                 if val < current.data:\n",
        "\n",
        "                   if current.left:\n",
        "                      current = current.left  # Go left...\n",
        "                   else:\n",
        "                      current.left = Node(val)  # Left child is empty; place value here\n",
        "                      self.nodeList.append(current.left.data)\n",
        "                      self.edgeList.append(tuple([current.data, current.left.data]))\n",
        "                      self.tree_size += 1\n",
        "                      self.leftHeight += 1\n",
        "                      break;      \n",
        "\n",
        "                 elif val > current.data:\n",
        "                 \n",
        "                    if current.right:\n",
        "                       current = current.right  # Go right...\n",
        "                    else:\n",
        "                       current.right = Node(val)  # Right child is empty; place value here\n",
        "                       self.nodeList.append(current.right.data)\n",
        "                       self.edgeList.append(tuple([current.data, current.right.data]))\n",
        "                       self.tree_size += 1\n",
        "                       self.rightHeight += 1\n",
        "                       break;      \n",
        "\n",
        "                 else:             \n",
        "                    break \n",
        "\n",
        "\n",
        "# ===================================================================\n",
        "      \n",
        "      def find(self, target): \n",
        "        \n",
        "        if self.root == None:\n",
        "          return False\n",
        "        \n",
        "        else:\n",
        "\n",
        "             current = self.root\n",
        "\n",
        "             while 1:\n",
        "                 if current == None:\n",
        "                   return False\n",
        "                 \n",
        "                 elif target == current.data:\n",
        "                   return True\n",
        "\n",
        "                 elif target < current.data:\n",
        "\n",
        "                   current = current.left\n",
        "                      \n",
        "                 elif target > current.data:\n",
        "\n",
        "                   current = current.right\n",
        "\n",
        "                 else:             \n",
        "                    return False\n",
        "          # Find a node with the 'target' value in the BST\n",
        "      '''\n",
        "      returns true if found, false otherwise\n",
        "      '''\n",
        "      ## TODO:  Complete this method! ##\n",
        "\n",
        "# ===================================================================\n",
        "      def size(self, node): \n",
        "        return self.tree_size # Counts the number of nodes in the BST\n",
        "      '''\n",
        "      returns number of nodes\n",
        "      '''\n",
        "      ## TODO:  Complete this method! ##\n",
        "\n",
        "# ===================================================================\n",
        "      def inorder(self, node):\n",
        "        if node.left is not None:\n",
        "          self.inorder(node.left)\n",
        "        print(node.data, end=\" \")\n",
        "        if node.right is not None:\n",
        "          self.inorder(node.right) \n",
        "        \n",
        "         # Performing in-order tree traversal\n",
        "      '''\n",
        "      prints values as encountered inorder\n",
        "      '''       \n",
        "      ## TODO:  Complete this method! ##\n",
        "\n",
        "# ===================================================================\n",
        "      def preorder(self, node): \n",
        "      \n",
        "        print(node.data, end=\" \")\n",
        "        if node.left is not None: \n",
        "          self.preorder(node.left)\n",
        "        if node.right is not None: \n",
        "          self.preorder(node.right)\n",
        "\n",
        "          \n",
        "         # Performing pre-order tree traversal\n",
        "      '''\n",
        "      prints values as encountered preorder\n",
        "      '''             \n",
        "      ## TODO:  Complete this method! ##\n",
        "\n",
        "# ===================================================================\n",
        "      def postorder(self, node): \n",
        "        if node.left is not None: \n",
        "          self.postorder(node.left)\n",
        "        if node.right is not None: \n",
        "          self.postorder(node.right)\n",
        "        print(node.data, end=\" \")\n",
        "        \n",
        "        \n",
        "        \n",
        "        # Performing post-order tree traversal\n",
        "      '''\n",
        "      prints values as encountered postorder\n",
        "      '''            \n",
        "      ## TODO:  Complete this method! ##\n",
        "      \n",
        "      def getHeight(self, node): ## Extra Credit\n",
        "        if node == None:\n",
        "          return 0\n",
        "        else:\n",
        "          return max(self.leftHeight, self.rightHeight)\n",
        "\n",
        "      def __str__(self):\n",
        "\n",
        "\n",
        "        G = nx.DiGraph(self.edgeList)\n",
        "        \n",
        "        options = {\"font_size\": 12, \"node_size\": 2000, \"node_color\": \"white\", \"edgecolors\": \"black\", \"linewidths\": 1, \"width\": 0.5,}\n",
        "\n",
        "        pos = hierarchy_pos(G,8)\n",
        "\n",
        "        nx.draw_networkx(G, pos=pos, **options)\n",
        "\n",
        "        ax = plt.gca()\n",
        "        ax.margins(0.1)\n",
        "        plt.axis(\"off\")\n",
        "        plt.show()\n",
        "\n",
        "        return str(self.edgeList)\n",
        "        \n",
        "        \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "      '''\n",
        "        Builds networkx visualization of the BST\n",
        "\n",
        "        The purpose of this method is to render a visualization of a constructed BST\n",
        "        Tree to confirm correctness. \n",
        "\n",
        "        Hint: To complete this you will need to create a node list, edge list, and/or \n",
        "        an adjacency matrix. You can then easily construct a graph visualization using networkx.\n",
        "        \n",
        "        Slightly alter one of your traversal methods (or the buildBST method) \n",
        "        above so that the appropriate structure(s) is constructed and saved as \n",
        "        an attribute(s) to the BST class, eg, edgeList.\n",
        "\n",
        "        Hint: Use a directed graph (DiGraph) so you can more easily \n",
        "        identify the root, leaf, and internal nodes. The standard networkx method \n",
        "        draw will suffice. It will render the tree as a standard graph (ie no clear root),\n",
        "        but you can determine which node is the root if you use a DiGraph. \n",
        "\n",
        "        Once the graph is constructed, a plot is created. \n",
        "      '''\n",
        "\n",
        "      # Revisit previous exercises and examples using Networkx to help!\n",
        "      # See docs here to help https://networkx.org/documentation/stable/tutorial.html\n",
        "      # Insert Code to diplay figure here\n",
        "\n",
        "        \n",
        "\n",
        "\n",
        "      \n",
        "              \n",
        "# ===================================================================\n",
        "              \n",
        "                  \n"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 595
        },
        "id": "xMczZGF-_bw9",
        "outputId": "84e87537-a411-4f3b-d113-0af00259a254"
      },
      "source": [
        "##################                  \n",
        "## Testing Code ##\n",
        "##################                        \n",
        "                        \n",
        "tree = BinarySearchTree()    \n",
        "treeEmpty = BinarySearchTree()  # Empty tree\n",
        "\n",
        "arr = [8,3,1,6,4,7,10,14,13]    # Array of nodes (data items)\n",
        "for i in arr:                   # For each data item, build the Binary Search Tree\n",
        "    tree.buildBST(i)\n",
        "\n",
        "print('What\\'s the size of the tree?')\n",
        "print(tree.size(tree.root))     # size method\n",
        "\n",
        "print('What\\'s the size of the tree?')\n",
        "print(treeEmpty.size(treeEmpty.root))\n",
        "\n",
        "print(\"\") \n",
        "print ('In-order Tree Traversal:')\n",
        "tree.inorder(tree.root)         # Perform in-order tree traversal, and print\n",
        " \n",
        "print(\"\") \n",
        "print ('Pre-order Tree Traversal:')\n",
        "tree.preorder(tree.root)        # Perform pre-order tree traversal, and print\n",
        "\n",
        "print(\"\")\n",
        "print ('Post-order Tree Traversal:')\n",
        "tree.postorder(tree.root)       # Perform post-order tree traversal, and print\n",
        "\n",
        "\n",
        "print(\"\")\n",
        "print ('Find 7:', end=\" \")      # find method\n",
        "print(tree.find(7))\n",
        "\n",
        "print('Find 5:', end=\" \")\n",
        "print(tree.find(5))\n",
        "\n",
        "print('Find 30:', end=\" \")\n",
        "print(tree.find(30))\n",
        "\n",
        "print(\" \")\n",
        "print('Height:', end=\" \")\n",
        "print(tree.getHeight(tree.root))\n",
        "\n",
        "print(\"\")\n",
        "print(\"\")\n",
        "print ('Display Figure of Tree:')\n",
        "print(tree) "
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What's the size of the tree?\n",
            "9\n",
            "What's the size of the tree?\n",
            "0\n",
            "\n",
            "In-order Tree Traversal:\n",
            "1 3 4 6 7 8 10 13 14 \n",
            "Pre-order Tree Traversal:\n",
            "8 3 1 6 4 7 10 14 13 \n",
            "Post-order Tree Traversal:\n",
            "1 4 7 6 3 13 14 10 8 \n",
            "Find 7: True\n",
            "Find 5: False\n",
            "Find 30: False\n",
            " \n",
            "Height: 4\n",
            "\n",
            "\n",
            "Display Figure of Tree:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(8, 3), (3, 1), (3, 6), (6, 4), (6, 7), (8, 10), (10, 14), (14, 13)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jbxMPfjmyC6o"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}